#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Chatbot Test Script
Bu dosya chatbot'unuzu kapsamlÄ± bir ÅŸekilde test etmenizi saÄŸlar.
"""

import unittest
from chatbot import SmartChatbot
from datetime import datetime

class TestSmartChatbot(unittest.TestCase):
    
    def setUp(self):
        """Her test Ã¶ncesi yeni chatbot oluÅŸtur"""
        self.chatbot = SmartChatbot()
    
    def test_greetings(self):
        """SelamlaÅŸma testleri"""
        responses = []
        greetings = ["merhaba", "selam", "hey", "hi", "hello"]
        
        for greeting in greetings:
            response = self.chatbot.chat(greeting)
            responses.append(response)
            self.assertIsNotNone(response)
            self.assertGreater(len(response), 0)
        
        # En az bir farklÄ± yanÄ±t olmalÄ±
        self.assertGreater(len(set(responses)), 1)
    
    def test_farewells(self):
        """VedalaÅŸma testleri"""
        response = self.chatbot.chat("gÃ¼le gÃ¼le")
        self.assertIsNotNone(response)
        self.assertGreater(len(response), 0)
    
    def test_thanks(self):
        """TeÅŸekkÃ¼r testleri"""
        response = self.chatbot.chat("teÅŸekkÃ¼rler")
        self.assertIsNotNone(response)
        self.assertGreater(len(response), 0)
    
    def test_time(self):
        """Saat testi"""
        response = self.chatbot.chat("saat kaÃ§")
        self.assertIsNotNone(response)
        self.assertIn(":", response)  # Saat formatÄ± iÃ§ermeli
    
    def test_math_operations(self):
        """Matematik iÅŸlemleri testleri"""
        # Toplama
        response = self.chatbot.chat("5 ve 3 topla")
        self.assertIn("5 + 3 = 8", response)
        
        # Ã‡Ä±karma
        response = self.chatbot.chat("10 Ã§Ä±kar 4")
        self.assertIn("10 - 4 = 6", response)
        
        # Ã‡arpma
        response = self.chatbot.chat("6 Ã§arp 7")
        self.assertIn("6 Ã— 7 = 42", response)
        
        # BÃ¶lme
        response = self.chatbot.chat("15 bÃ¶l 3")
        self.assertIn("15 Ã· 3 = 5.0", response)
    
    def test_jokes(self):
        """FÄ±kra testleri"""
        response = self.chatbot.chat("fÄ±kra anlat")
        self.assertIsNotNone(response)
        self.assertGreater(len(response), 0)
    
    def test_facts(self):
        """Ä°lginÃ§ bilgi testleri"""
        response = self.chatbot.chat("ilginÃ§ bilgi ver")
        self.assertIsNotNone(response)
        self.assertGreater(len(response), 0)
    
    def test_help(self):
        """YardÄ±m testi"""
        response = self.chatbot.chat("yardÄ±m")
        self.assertIsNotNone(response)
        self.assertGreater(len(response), 0)
    
    def test_teaching(self):
        """Ã–ÄŸretme testi"""
        # Yeni yanÄ±t Ã¶ÄŸret
        self.chatbot.teach_new_response("test", "Bu bir test yanÄ±tÄ±dÄ±r!")
        
        # Ã–ÄŸretilen yanÄ±tÄ± test et
        response = self.chatbot.chat("test")
        self.assertEqual(response, "Bu bir test yanÄ±tÄ±dÄ±r!")
    
    def test_custom_responses(self):
        """Ã–zel yanÄ±tlar testi"""
        # Ã–zel yanÄ±t ekle
        self.chatbot.custom_responses["Ã¶zel"] = "Bu Ã¶zel bir yanÄ±ttÄ±r!"
        
        # Test et
        response = self.chatbot.chat("Ã¶zel")
        self.assertEqual(response, "Bu Ã¶zel bir yanÄ±ttÄ±r!")
    
    def test_conversation_history(self):
        """KonuÅŸma geÃ§miÅŸi testi"""
        self.chatbot.chat("merhaba")
        self.chatbot.chat("nasÄ±lsÄ±n")
        
        history = self.chatbot.conversation_history
        self.assertEqual(len(history), 2)
        self.assertIn('user', history[0])
        self.assertIn('bot', history[0])
        self.assertIn('timestamp', history[0])
    
    def test_learning_history(self):
        """Ã–ÄŸrenme geÃ§miÅŸi testi"""
        self.chatbot.learn_from_conversation("test input", "test feedback")
        
        learning_history = self.chatbot.learning_history
        self.assertEqual(len(learning_history), 1)
        self.assertEqual(learning_history[0]['input'], "test input")
        self.assertEqual(learning_history[0]['feedback'], "test feedback")
    
    def test_stats(self):
        """Ä°statistik testi"""
        self.chatbot.chat("merhaba")
        self.chatbot.chat("gÃ¼le gÃ¼le")
        
        stats = self.chatbot.get_conversation_stats()
        self.assertEqual(stats['total_messages'], 2)
        self.assertIn('greetings', stats['intents'])
        self.assertIn('farewells', stats['intents'])
    
    def test_save_load_knowledge(self):
        """Kaydetme ve yÃ¼kleme testi"""
        # Ã–zel yanÄ±t ekle
        self.chatbot.teach_new_response("test_save", "Test yanÄ±tÄ±")
        
        # Kaydet
        self.chatbot.save_knowledge("test_knowledge.json")
        
        # Yeni chatbot oluÅŸtur ve yÃ¼kle
        new_chatbot = SmartChatbot()
        new_chatbot.load_knowledge("test_knowledge.json")
        
        # Test et
        response = new_chatbot.chat("test_save")
        self.assertEqual(response, "Test yanÄ±tÄ±")
        
        # Test dosyasÄ±nÄ± temizle
        import os
        if os.path.exists("test_knowledge.json"):
            os.remove("test_knowledge.json")
    
    def test_unknown_intent(self):
        """Bilinmeyen niyet testi"""
        response = self.chatbot.chat("xyzabc123")
        self.assertIsNotNone(response)
        self.assertGreater(len(response), 0)
    
    def test_text_preprocessing(self):
        """Metin Ã¶n iÅŸleme testi"""
        processed = self.chatbot.preprocess_text("Merhaba DÃ¼nya!")
        self.assertIsInstance(processed, str)
        self.assertGreater(len(processed), 0)

def run_interactive_test():
    """Ä°nteraktif test fonksiyonu"""
    print("ğŸ¤– Chatbot Ä°nteraktif Test BaÅŸlÄ±yor...\n")
    
    chatbot = SmartChatbot()
    
    # Ã–rnek kullanÄ±m
    test_cases = [
        ("Merhaba!", "SelamlaÅŸma"),
        ("FÄ±kra anlat", "FÄ±kra"),
        ("Ä°lginÃ§ bilgi ver", "Ä°lginÃ§ bilgi"),
        ("5 ve 3 topla", "Matematik"),
        ("Saat kaÃ§?", "Saat"),
        ("YardÄ±m", "YardÄ±m"),
        ("GÃ¼le gÃ¼le", "VedalaÅŸma")
    ]
    
    for user_input, description in test_cases:
        print(f"ğŸ§ª Test: {description}")
        print(f"ğŸ‘¤ KullanÄ±cÄ±: {user_input}")
        response = chatbot.chat(user_input)
        print(f"ğŸ¤– Bot: {response}")
        print("-" * 50)
    
    # Ã–ÄŸretme testi
    print("ğŸ“š Ã–ÄŸretme Testi:")
    chatbot.teach_new_response("python", "Python harika bir programlama dilidir!")
    response = chatbot.chat("python")
    print(f"ğŸ‘¤ KullanÄ±cÄ±: python")
    print(f"ğŸ¤– Bot: {response}")
    print("-" * 50)
    
    # Ä°statistikler
    stats = chatbot.get_conversation_stats()
    print("ğŸ“Š Test Ä°statistikleri:")
    print(f"Toplam mesaj: {stats['total_messages']}")
    print(f"Ã–ÄŸrenme kayÄ±tlarÄ±: {stats['learning_entries']}")
    print(f"Niyet daÄŸÄ±lÄ±mÄ±: {stats['intents']}")

if __name__ == '__main__':
    # Unit testleri Ã§alÄ±ÅŸtÄ±r
    print("ğŸ§ª Unit Testler BaÅŸlÄ±yor...")
    unittest.main(verbosity=2, exit=False)
    
    print("\n" + "="*60 + "\n")
    
    # Ä°nteraktif test Ã§alÄ±ÅŸtÄ±r
    run_interactive_test() 